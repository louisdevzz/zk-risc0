// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_CODE_FOR_ZK_PROOF_ELF, GUEST_CODE_FOR_ZK_PROOF_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt};
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize)]
struct TrainingData {
    customer_data: Vec<(Vec<f32>, f32)>,
    epochs: usize,
    learning_rate: f32,
    test_inputs: Vec<Vec<f32>>,
}

fn main() {
    println!("Starting the host program...");

    println!("Preparing training data...");
    let training_data = TrainingData {
        customer_data: vec![
            (vec![1.0, 2.0, 3.0], 0.3),
            (vec![2.0, 3.0, 4.0], 0.5),
            (vec![3.0, 4.0, 5.0], 0.7),
            (vec![4.0, 5.0, 6.0], 0.9),
            (vec![5.0, 6.0, 7.0], 1.1),
        ],
        epochs: 100,
        learning_rate: 0.01,
        test_inputs: vec![
            vec![1.2, 2.2, 3.2],
            vec![2.7, 3.7, 4.7],
            vec![3.8, 4.8, 5.8],
        ],
    };

    println!("Creating ExecutorEnv and writing training data...");
    let env = ExecutorEnv::builder()
        .write(&training_data.customer_data).unwrap()
        .write(&training_data.epochs).unwrap()
        .write(&training_data.learning_rate).unwrap()
        .write(&training_data.test_inputs).unwrap()
        .build()
        .unwrap();

    println!("Initializing prover...");
    let prover = default_prover();

    println!("Starting the proving process...");
    let prove_info = prover.prove(env, GUEST_CODE_FOR_ZK_PROOF_ELF).unwrap();
    let receipt: Receipt = prove_info.receipt; // Extract the Receipt from ProveInfo

    println!("Proof generated successfully. Decoding journal...");
    let (summary, avg_prediction): (Vec<(f32, f32)>, f32) = receipt.journal.decode().unwrap();

    println!("\nNeural Network Summary:");
    for (i, (avg_weight, avg_bias)) in summary.iter().enumerate() {
        println!("Layer {}: Avg Weight = {:.4}, Avg Bias = {:.4}", i + 1, avg_weight, avg_bias);
    }
    println!("Average Prediction: {:.4}", avg_prediction);

    println!("\nVerifying the receipt...");
    receipt.verify(GUEST_CODE_FOR_ZK_PROOF_ID).unwrap();
    println!("Proof verified successfully!");

    println!("Host program completed.");
}
